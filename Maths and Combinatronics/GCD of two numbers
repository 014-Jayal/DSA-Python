#Not Optimized
def gcd(a, b):

    result = min(a, b)

    while result > 0:
        if a % result == 0 and b % result == 0:
            break
        result -= 1

    return result

-------------------------------------------------------

#Not yet optimized
def gcd(a, b):
  
    if a == 0:
        return b
    if b == 0:
        return a

    if a == b:
        return a

    if a > b:
        return gcd(a - b, b)
    return gcd(a, b - a)

------------------------------------------------------

#Not yet optimized
def gcd(a, b):
    if a == 0:
        return b
    if b == 0:
        return a

    if a == b:
        return a

    if a > b:
        if a % b == 0:
            return b
        return gcd(a - b, b)

    if b % a == 0:
        return a
    return gcd(a, b - a)

----------------------------------------------------

# Recursive function to calculate GCD using Euclidean algorithm
def gcd(a, b):
    return a if b == 0 else gcd(b, a % b)
