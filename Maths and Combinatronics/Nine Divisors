#Not Optimized
class Solution:
    
    def divisorcount(self, n):
        
        cnt = 0
        
        for i  in range(1, n+1):
            if n % i == 0:
                cnt += 1
                
        return cnt
        
    def countNumbers(self, n):
        
        no = 0
        
        for i in range(1, n+1):
            if self.divisorcount(i) == 9:
                no += 1
                
        return no

---------------------------------------------------------

class Solution:
    
        
    def countNumbers(self, n):
        
        import math 
        
        c = 0
        
        limit = int(math.sqrt(n))
        
        prime = [i for i in range(limit+1)]
        
        for i in range(2, int(math.sqrt(limit)+1)):
            if prime[i] == i:
                for j in range(i*i, limit+1, i):
                    if prime[j] == j:
                        prime[j] = i
                        
        for i in range(2, limit+1):
            p = prime[i]
            q = prime[i // prime[i]]
            
            if p * q == i and q != 1 and p != q:
                c +=1
            
            elif prime[i] == i and pow(i,8) <= n:
                c += 1
            
        return c
        
        
        
        
                
