#Not Optimized -gfg
def isPrime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def solveQueries(queries):
    n = len(queries)

    # to store the results
    results = []

    for i in range(n):
        l = queries[i][0]
        r = queries[i][1]
        count = 0

        # Count the prime numbers in the range [l, r]
        for j in range(l, r + 1):
            if isPrime(j):
                count += 1

        # Store the result for this query
        results.append(count)
    return results

------------------------------------------------------------------

#Optimized - gfg
class Solution:
    
        
    def countPrimes(self,L,R):
        
        
        pri = [1] * (R+1)
        pri[0] = pri[1] = False
        
        cnt = 0
        
        for i in range(2, int(R ** 0.5)+1):
            if pri[i]:
                for j in range(i*i, R+1, i):
                    pri[j] = 0
                    
        for i in range(L, R+1):
            if pri[i]:
                cnt += 1
                
        return cnt
        
