#Not Optimized
def gcd(a, b):
    if a == 0:
        return b
    return gcd(b % a, a)

def lcm(a, b):
    product = a * b
    return product // gcd(a, b)

def lcmTriplets(n):
    maxLCM = 1

    for i in range(1, n + 1):
        for j in range(i, n + 1):
            for k in range(j, n + 1):
                
                currentLCM = lcm(lcm(i, j), k)
                maxLCM = max(maxLCM, currentLCM)
    
    return maxLCM

------------------------------------------------------------------

#Optimized
class Solution:
    import math
    
    def lcmTriplets(self, n):
        
        if n < 3:
            return n
        
        if n % 2 != 0:
            return (n) * (n-1) * (n-2)
            
        if self.math.gcd(n, n-3) == 1:
            return (n) * (n-1) * (n-3)
            
        return (n-1) * (n-2) * (n-3)

-------------------------------------------------------------------

